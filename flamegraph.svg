<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="470.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="453" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="453" > </text>
<g id="frames">
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (929,292,920 samples, 19.13%)</title><rect x="633.1" y="229" width="225.7" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="636.12" y="239.5" >std::lock_guard&lt;std::mutex&gt;::..</text>
</g>
<g >
<title>hash_futex (10,101,010 samples, 0.21%)</title><rect x="1052.6" y="85" width="2.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1055.62" y="95.5" ></text>
</g>
<g >
<title>futex_wake (70,707,070 samples, 1.46%)</title><rect x="375.5" y="85" width="17.2" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="378.53" y="95.5" ></text>
</g>
<g >
<title>__gthread_active_p (20,202,020 samples, 0.42%)</title><rect x="1121.3" y="181" width="4.9" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1124.31" y="191.5" ></text>
</g>
<g >
<title>std::mutex::unlock (30,303,030 samples, 0.62%)</title><rect x="1182.6" y="373" width="7.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="1185.64" y="383.5" ></text>
</g>
<g >
<title>__gthread_mutex_unlock (1,090,909,080 samples, 22.45%)</title><rect x="203.8" y="197" width="265.0" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="206.80" y="207.5" >__gthread_mutex_unlock</text>
</g>
<g >
<title>__x64_sys_futex (20,202,020 samples, 0.42%)</title><rect x="368.2" y="133" width="4.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="371.17" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (191,919,190 samples, 3.95%)</title><rect x="797.5" y="149" width="46.6" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="800.48" y="159.5" >entr..</text>
</g>
<g >
<title>__gthread_active_p (60,606,060 samples, 1.25%)</title><rect x="844.1" y="181" width="14.7" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="847.10" y="191.5" ></text>
</g>
<g >
<title>__GI___clone (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="389" width="1160.3" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="25.27" y="399.5" >__GI___clone</text>
</g>
<g >
<title>__x64_sys_futex (60,606,060 samples, 1.25%)</title><rect x="797.5" y="117" width="14.7" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="800.48" y="127.5" ></text>
</g>
<g >
<title>__x64_sys_futex (10,101,010 samples, 0.21%)</title><rect x="1040.4" y="133" width="2.4" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1043.35" y="143.5" ></text>
</g>
<g >
<title>__lll_lock_wait (202,020,200 samples, 4.16%)</title><rect x="142.5" y="165" width="49.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="145.47" y="175.5" >__ll..</text>
</g>
<g >
<title>native_queued_spin_lock_slowpath (40,404,040 samples, 0.83%)</title><rect x="378.0" y="53" width="9.8" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="380.98" y="63.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (40,404,040 samples, 0.83%)</title><rect x="66.4" y="229" width="9.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="69.42" y="239.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (20,202,020 samples, 0.42%)</title><rect x="12.5" y="373" width="4.9" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="15.45" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.28] (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="357" width="1160.3" height="15.0" fill="rgb(240,162,38)" rx="2" ry="2" />
<text  x="25.27" y="367.5" >[libstdc++.so.6.0.28]</text>
</g>
<g >
<title>CRingBuff::GetData (10,101,010 samples, 0.21%)</title><rect x="10.0" y="389" width="2.5" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
<g >
<title>[main] (10,101,010 samples, 0.21%)</title><rect x="669.9" y="181" width="2.5" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="672.92" y="191.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (30,303,030 samples, 0.62%)</title><rect x="1182.6" y="389" width="7.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="1185.64" y="399.5" ></text>
</g>
<g >
<title>std::operator&amp; (20,202,020 samples, 0.42%)</title><rect x="17.4" y="357" width="4.9" height="15.0" fill="rgb(221,76,18)" rx="2" ry="2" />
<text  x="20.36" y="367.5" ></text>
</g>
<g >
<title>CRingBuff::GetData (1,828,282,810 samples, 37.63%)</title><rect x="24.7" y="245" width="444.1" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="27.72" y="255.5" >CRingBuff::GetData</text>
</g>
<g >
<title>std::mutex::unlock (1,121,212,110 samples, 23.08%)</title><rect x="196.4" y="213" width="272.4" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="199.44" y="223.5" >std::mutex::unlock</text>
</g>
<g >
<title>futex_wait (20,202,020 samples, 0.42%)</title><rect x="164.6" y="85" width="4.9" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="167.55" y="95.5" ></text>
</g>
<g >
<title>__get_user_nocheck_4 (40,404,040 samples, 0.83%)</title><rect x="799.9" y="69" width="9.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="802.94" y="79.5" ></text>
</g>
<g >
<title>__lock_text_start (20,202,020 samples, 0.42%)</title><rect x="387.8" y="37" width="4.9" height="15.0" fill="rgb(232,125,30)" rx="2" ry="2" />
<text  x="390.80" y="47.5" ></text>
</g>
<g >
<title>do_futex (50,505,050 samples, 1.04%)</title><rect x="1042.8" y="101" width="12.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1045.81" y="111.5" ></text>
</g>
<g >
<title>do_syscall_64 (111,111,110 samples, 2.29%)</title><rect x="164.6" y="133" width="26.9" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="167.55" y="143.5" >d..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (404,040,400 samples, 8.32%)</title><rect x="368.2" y="149" width="98.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="371.17" y="159.5" >entry_SYSCA..</text>
</g>
<g >
<title>__lll_lock_wait (424,242,420 samples, 8.73%)</title><rect x="741.1" y="165" width="103.0" height="15.0" fill="rgb(247,194,46)" rx="2" ry="2" />
<text  x="744.06" y="175.5" >__lll_lock_w..</text>
</g>
<g >
<title>futex_wait_setup (10,101,010 samples, 0.21%)</title><rect x="809.8" y="69" width="2.4" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="812.75" y="79.5" ></text>
</g>
<g >
<title>CRingBuff::PutData (2,313,131,290 samples, 47.61%)</title><rect x="564.4" y="245" width="561.8" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="567.43" y="255.5" >CRingBuff::PutData</text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (1,050,505,040 samples, 21.62%)</title><rect x="211.2" y="181" width="255.1" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="214.16" y="191.5" >__GI___pthread_mutex_unlock</text>
</g>
<g >
<title>__gthread_active_p (10,101,010 samples, 0.21%)</title><rect x="466.3" y="181" width="2.5" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="469.30" y="191.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (272,727,270 samples, 5.61%)</title><rect x="1055.1" y="117" width="66.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1058.07" y="127.5" >syscall..</text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::operator+= (232,323,230 samples, 4.78%)</title><rect x="1126.2" y="245" width="56.4" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="1129.22" y="255.5" >std::..</text>
</g>
<g >
<title>CRingBuff::PutData (20,202,020 samples, 0.42%)</title><rect x="12.5" y="389" width="4.9" height="15.0" fill="rgb(233,131,31)" rx="2" ry="2" />
<text  x="15.45" y="399.5" ></text>
</g>
<g >
<title>syscall_enter_from_user_mode (90,909,090 samples, 1.87%)</title><rect x="169.5" y="117" width="22.0" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="172.46" y="127.5" >s..</text>
</g>
<g >
<title>main (4,858,585,810 samples, 100.00%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >main</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (90,909,090 samples, 1.87%)</title><rect x="611.0" y="229" width="22.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="614.04" y="239.5" >_..</text>
</g>
<g >
<title>__x64_sys_futex (50,505,050 samples, 1.04%)</title><rect x="1042.8" y="117" width="12.3" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="1045.81" y="127.5" ></text>
</g>
<g >
<title>Producer (2,626,262,600 samples, 54.05%)</title><rect x="544.8" y="261" width="637.8" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="547.80" y="271.5" >Producer</text>
</g>
<g >
<title>[main] (20,202,020 samples, 0.42%)</title><rect x="878.4" y="181" width="4.9" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="881.44" y="191.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (10,101,010 samples, 0.21%)</title><rect x="10.0" y="373" width="2.5" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void  (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="293" width="1160.3" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="25.27" y="303.5" >std::__invoke&lt;void </text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::operator+= (252,525,250 samples, 5.20%)</title><rect x="483.5" y="245" width="61.3" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="486.47" y="255.5" >std::_..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (303,030,300 samples, 6.24%)</title><rect x="392.7" y="117" width="73.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="395.70" y="127.5" >syscall_..</text>
</g>
<g >
<title>std::mutex::unlock (1,060,606,050 samples, 21.83%)</title><rect x="868.6" y="213" width="257.6" height="15.0" fill="rgb(227,105,25)" rx="2" ry="2" />
<text  x="871.63" y="223.5" >std::mutex::unlock</text>
</g>
<g >
<title>futex_wait_setup (20,202,020 samples, 0.42%)</title><rect x="164.6" y="69" width="4.9" height="15.0" fill="rgb(247,195,46)" rx="2" ry="2" />
<text  x="167.55" y="79.5" ></text>
</g>
<g >
<title>do_futex (50,505,050 samples, 1.04%)</title><rect x="799.9" y="101" width="12.3" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="802.94" y="111.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (414,141,410 samples, 8.52%)</title><rect x="91.0" y="197" width="100.5" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="93.96" y="207.5" >__gthread_mu..</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::lock_guard (474,747,470 samples, 9.77%)</title><rect x="76.2" y="229" width="115.3" height="15.0" fill="rgb(235,139,33)" rx="2" ry="2" />
<text  x="79.24" y="239.5" >std::lock_guar..</text>
</g>
<g >
<title>try_to_wake_up (20,202,020 samples, 0.42%)</title><rect x="387.8" y="53" width="4.9" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="390.80" y="63.5" ></text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (1,101,010,090 samples, 22.66%)</title><rect x="858.8" y="229" width="267.4" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="861.81" y="239.5" >std::lock_guard&lt;std::mutex&gt;::~lock_..</text>
</g>
<g >
<title>std::__invoke_impl&lt;void, void  (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="277" width="1160.3" height="15.0" fill="rgb(227,101,24)" rx="2" ry="2" />
<text  x="25.27" y="287.5" >std::__invoke_impl&lt;void, void </text>
</g>
<g >
<title>_raw_spin_lock (40,404,040 samples, 0.83%)</title><rect x="378.0" y="69" width="9.8" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="380.98" y="79.5" ></text>
</g>
<g >
<title>Consumer (20,202,020 samples, 0.42%)</title><rect x="17.4" y="389" width="4.9" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="20.36" y="399.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (383,838,380 samples, 7.90%)</title><rect x="98.3" y="181" width="93.2" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="101.32" y="191.5" >__GI___pthr..</text>
</g>
<g >
<title>start_thread (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="373" width="1160.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="25.27" y="383.5" >start_thread</text>
</g>
<g >
<title>do_syscall_64 (383,838,380 samples, 7.90%)</title><rect x="373.1" y="133" width="93.2" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="376.08" y="143.5" >do_syscall_64</text>
</g>
<g >
<title>__x64_sys_futex (20,202,020 samples, 0.42%)</title><rect x="164.6" y="117" width="4.9" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="167.55" y="127.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_unlock (979,797,970 samples, 20.17%)</title><rect x="883.3" y="181" width="238.0" height="15.0" fill="rgb(232,126,30)" rx="2" ry="2" />
<text  x="886.35" y="191.5" >__GI___pthread_mutex_unlock</text>
</g>
<g >
<title>std::lock_guard&lt;std::mutex&gt;::~lock_guard (1,141,414,130 samples, 23.49%)</title><rect x="191.5" y="229" width="277.3" height="15.0" fill="rgb(221,75,18)" rx="2" ry="2" />
<text  x="194.54" y="239.5" >std::lock_guard&lt;std::mutex&gt;::~lock_gu..</text>
</g>
<g >
<title>all (4,858,585,810 samples, 100%)</title><rect x="10.0" y="421" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="431.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (333,333,330 samples, 6.86%)</title><rect x="1040.4" y="149" width="80.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1043.35" y="159.5" >entry_SYS..</text>
</g>
<g >
<title>wake_up_q (20,202,020 samples, 0.42%)</title><rect x="387.8" y="69" width="4.9" height="15.0" fill="rgb(237,151,36)" rx="2" ry="2" />
<text  x="390.80" y="79.5" ></text>
</g>
<g >
<title>do_syscall_64 (323,232,320 samples, 6.65%)</title><rect x="1042.8" y="133" width="78.5" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1045.81" y="143.5" >do_syscal..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="325" width="1160.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="25.27" y="335.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>do_futex (20,202,020 samples, 0.42%)</title><rect x="164.6" y="101" width="4.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="167.55" y="111.5" ></text>
</g>
<g >
<title>_raw_spin_lock (10,101,010 samples, 0.21%)</title><rect x="1045.3" y="85" width="2.4" height="15.0" fill="rgb(239,160,38)" rx="2" ry="2" />
<text  x="1048.26" y="95.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (111,111,110 samples, 2.29%)</title><rect x="164.6" y="149" width="26.9" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="167.55" y="159.5" >e..</text>
</g>
<g >
<title>std::mutex::lock (454,545,450 samples, 9.36%)</title><rect x="81.1" y="213" width="110.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="84.14" y="223.5" >std::mutex::l..</text>
</g>
<g >
<title>std::mutex::lock (858,585,850 samples, 17.67%)</title><rect x="650.3" y="213" width="208.5" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="653.29" y="223.5" >std::mutex::lock</text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (20,202,020 samples, 0.42%)</title><rect x="17.4" y="373" width="4.9" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="20.36" y="383.5" ></text>
</g>
<g >
<title>futex_wait (50,505,050 samples, 1.04%)</title><rect x="799.9" y="85" width="12.3" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="802.94" y="95.5" ></text>
</g>
<g >
<title>futex_wake (20,202,020 samples, 0.42%)</title><rect x="1047.7" y="85" width="4.9" height="15.0" fill="rgb(219,65,15)" rx="2" ry="2" />
<text  x="1050.71" y="95.5" ></text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (959,595,950 samples, 19.75%)</title><rect x="888.3" y="165" width="233.0" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="891.25" y="175.5" >__pthread_mutex_unlock_usercnt</text>
</g>
<g >
<title>__x64_sys_futex (80,808,080 samples, 1.66%)</title><rect x="373.1" y="117" width="19.6" height="15.0" fill="rgb(239,159,38)" rx="2" ry="2" />
<text  x="376.08" y="127.5" ></text>
</g>
<g >
<title>__gthread_mutex_lock (797,979,790 samples, 16.42%)</title><rect x="665.0" y="197" width="193.8" height="15.0" fill="rgb(228,107,25)" rx="2" ry="2" />
<text  x="668.01" y="207.5" >__gthread_mutex_lock</text>
</g>
<g >
<title>Consumer (2,151,515,130 samples, 44.28%)</title><rect x="22.3" y="261" width="522.5" height="15.0" fill="rgb(211,29,7)" rx="2" ry="2" />
<text  x="25.27" y="271.5" >Consumer</text>
</g>
<g >
<title>do_syscall_64 (191,919,190 samples, 3.95%)</title><rect x="797.5" y="133" width="46.6" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="800.48" y="143.5" >do_s..</text>
</g>
<g >
<title>__pthread_mutex_unlock_usercnt (1,040,404,030 samples, 21.41%)</title><rect x="213.6" y="165" width="252.7" height="15.0" fill="rgb(253,221,52)" rx="2" ry="2" />
<text  x="216.62" y="175.5" >__pthread_mutex_unlock_usercnt</text>
</g>
<g >
<title>do_futex (70,707,070 samples, 1.46%)</title><rect x="375.5" y="101" width="17.2" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="378.53" y="111.5" ></text>
</g>
<g >
<title>__GI___pthread_mutex_lock (707,070,700 samples, 14.55%)</title><rect x="672.4" y="181" width="171.7" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="675.37" y="191.5" >__GI___pthread_mutex_l..</text>
</g>
<g >
<title>syscall_enter_from_user_mode (131,313,130 samples, 2.70%)</title><rect x="812.2" y="117" width="31.9" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="815.20" y="127.5" >sy..</text>
</g>
<g >
<title>__gthread_mutex_unlock (1,040,404,030 samples, 21.41%)</title><rect x="873.5" y="197" width="252.7" height="15.0" fill="rgb(212,32,7)" rx="2" ry="2" />
<text  x="876.53" y="207.5" >__gthread_mutex_unlock</text>
</g>
<g >
<title>std::__atomic_base&lt;unsigned long&gt;::load (60,606,060 samples, 1.25%)</title><rect x="468.8" y="245" width="14.7" height="15.0" fill="rgb(230,118,28)" rx="2" ry="2" />
<text  x="471.75" y="255.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void  (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="341" width="1160.3" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="25.27" y="351.5" >std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void  (4,777,777,730 samples, 98.34%)</title><rect x="22.3" y="309" width="1160.3" height="15.0" fill="rgb(236,146,35)" rx="2" ry="2" />
<text  x="25.27" y="319.5" >std::thread::_Invoker&lt;std::tuple&lt;void </text>
</g>
</g>
</svg>
